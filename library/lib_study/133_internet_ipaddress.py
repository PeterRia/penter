import ipaddress

# 学习ip_interface和ip_network


"""
#子网掩码换算工具 https://www.sojson.com/convert/subnetmask.html
构造一个IPv4网络定义。 地址可以是以下之一：

由IP地址和可选掩码组成的字符串，用斜杠（/）分隔。 IP地址是网络地址，掩码可以是单个数字（表示前缀）或IPv4地址的字符串表示形式。 
如果是后者，则以非零字段开头的掩码将被解释为网络掩码，如果以零字段开头的掩码将被解释为主机掩码，唯一的例外是全零掩码被视为 网罩。 如果未提供掩码，则将其视为/ 32。

例如，以下地址规范是等效的：192.168.1.0/24、192.168.1.0/255.255.255.0和192.168.1.0/0.0.0.255。

可以容纳32位的整数。 这等效于单地址网络，网络地址为地址，掩码为/ 32。

打包为长度为4，big-endian的字节对象的整数。 解释类似于整数地址。

地址描述和网络掩码的二元组，其中地址描述可以是字符串，32位整数，4字节压缩整数或现有的IPv4Address对象； 网络掩码可以是代表前缀长度的整数（例如24），也可以是代表前缀掩码的字符串（例如255.255.255.0）。

192.168.1.0/26
/26是什么鬼？
255.255.255.192的二进制是多少？ “11111111-11111111-11111111-11”大家数数一共多少个1？不用数了，是26个1，为了简化子网掩码的表示，用/26代替255.255.255.192。

可以表示的网络段
192.168.1.0-192.168.1.63

二进制表示：
192.168.1.0

11000000.10101000.00000001.00000000

192.168.1.63

11000000.10101000.00000001.00111111

首尾地址完全相同的是多少？
11000000.10101000.00000001.00
26位！

"""

"""
从前有一个地主，有256间房子，地主家的门牌号码是“192.168.1”，
那么他家第一间房子的门牌号码是192.168.1.0，第二间是192.168.1.1，…第256间的编号是192.168.1.255。地主老了，需要把256间房子分给4个儿子，平均分配，每个儿子可以分64间。
请来一位先生主持公道，先生这么来操作：
192.168.1.0-192.168.1.63 分给大儿子
192.168.1.64-192.168.1.127 分给二儿子
192.168.1.128 -192.168.1.191 分给三儿子
192.168.1.192-192.168.1.255 分给四儿子
那如何来描述四个儿子的子网网段呢？
192.168.1.0/26
192.168.1.64/26
192.168.1.128/26
192.168.1.192/26

一个主机192.168.1.199/26 能否和直连主机192.168.1.200/24 通信？可以的，因为都是四儿子的房间。
一个主机192.168.1.199/26 能否和直连主机192.168.1.1/24 通信？ 不可以，因为一个是大儿子的房间，一个是四儿子的房间，无法直连通信！

子网掩码决定了192.168.1.199的前三段192.168.1是网络号，最后一段199是主机号

怎么确定网络段和主机
IP    地址：192.168.1.199       ‐＞11000000.10101000.00000001.11000111
子网掩码：255.255.255.0          ‐＞11111111.11111111.11111111.00000000
子网掩码的左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度。

例如上面的子网掩码255.255.255.0的 “1”的个数是左边24位，则对应IP地址左边的位数也是24位;
则这个IP地址的网络号就是11000000.10101000.00000001 ，转换成十进制就是 192.168.1，网掩码255.255.255.0的 “0”的个数是右边8位，则这个IP地址的主机号就是11000111，转换成十进制就是199.
"""


print(ipaddress.ip_address('192.168.0.1'))

print(ipaddress.ip_address('2001:db8::'))

# 192.168.1.0/24, 192.168.1.0/255.255.255.0 and 192.168.1.0/0.0.0.255.
print(ipaddress.ip_network('192.168.0.0/28'))

ip_v4 = ipaddress.IPv4Address('192.168.0.1')
print(ip_v4)
print(ipaddress.IPv4Address(3232235521))
print(ipaddress.IPv4Address(b'\xC0\xA8\x00\x01'))

print(ip_v4.version)
print(ip_v4.reverse_pointer)
print(ipaddress.ip_address('2001:db8::').reverse_pointer)

print(int(ipaddress.ip_address('2001:db8::')))

print(ipaddress.IPv4Address('127.0.0.2') > ipaddress.IPv4Address('127.0.0.1'))

print(ipaddress.IPv4Address('127.0.0.2') == ipaddress.IPv4Address('127.0.0.1'))

print(ipaddress.IPv4Address('127.0.0.2') != ipaddress.IPv4Address('127.0.0.1'))

print(ipaddress.IPv4Address('127.0.0.2') + 3)

print(list(ipaddress.ip_network('192.0.2.0/29').hosts()))
print(list(ipaddress.ip_network('192.0.2.0/31').hosts()))

print()

n1 = ipaddress.ip_network('192.0.2.0/28')
n2 = ipaddress.ip_network('192.0.2.1/32')

print(list(n1.address_exclude(n2)))
print()
print(list(ipaddress.ip_network('192.0.2.0/24').subnets()))

print(list(ipaddress.ip_network('192.0.2.0/24').subnets(prefixlen_diff=2)))

print(list(ipaddress.ip_network('192.0.2.0/24').subnets(new_prefix=26)))

print(list(ipaddress.ip_network('192.0.2.0/24').subnets(new_prefix=23)))

print(list(ipaddress.ip_network('192.0.2.0/24').subnets(new_prefix=25)))